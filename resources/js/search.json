[[{"l":"Welcome to Jobly","p":["Jobly is a sidekiq-based job server with a command line interface, web API and a web dashboard."]},{"i":"whats-in-the-box","l":"What's in the Box","p":["Command line interface- for starting the server, starting the worker, and for running jobs.","Web API- for executing jobs.","Web Dashboard- including job progress and status.","Remote Syslog Support- send output to Papertrail or remote syslog.","Slack Notifications- report job progress to Slack."]},{"l":"Screencast"},{"l":"Screenshot"},{"l":"Interactive Demo","p":["For an interactive demo, visit the Jobly scenario on Katacoda:"]},{"l":"Installation","p":["Jobly is packaged as a Ruby gem, install it by running:","Alternatively, you can download the the official Jobly docker image, or take a look at the Docker Compose Example:","Welcome"]},{"l":"Prerequisites","p":["Ruby","Redis server"]}],[{"l":"Quick Start","p":["These steps are similar (but not identical) to the steps demonstrated in the Jobly screencast."]},{"i":"step-1-setup-a-jobly-workspace","l":"Step 1: Setup a Jobly workspace"},{"i":"step-2-verify-the-server-is-working","l":"Step 2: Verify the server is working","p":["Go to localhost:3000- you should see the Sidekiq dashboard."]},{"i":"step-3-execute-a-job-through-the-api","l":"Step 3: Execute a job through the API","p":["Go to localhost:3000/do/Hello- you should receive a JSON encoded acknowledgement.","Go back to the dashboard and view the job's status."]},{"i":"step-4-execute-a-job-through-the-cli","l":"Step 4: Execute a job through the CLI","p":["Form the same workspace directory, run:","Finally, view the localhost:3000/statuses page to ensure your jobs were executed."]}],[{"l":"Server","p":["The Jobly server side consists of two components:","Web Server- provides both a dashboard and an API for running jobs.","Worker- executes jobs."]},{"l":"Web Server","p":["To start the web server:","Run jobly server from the command line.","Open localhost:3000 in your browser.","This will start a server with two primary entry points: Web Dashboard and Jobly API."]},{"l":"Web Dashboard","p":["This dashboard is available at the root of the web server. It is a sidekiq web dashboard, with additional plugins for job progress and status."]},{"l":"API Server","p":["This is a simple web API server that allows you to execute jobs remotely by calling /do/JobName?param=value.","Server"]},{"l":"Worker","p":["To start processing jobs, run:","Server"]}],[{"l":"Running Jobs using the API","p":["The API supports running jobs either by GET or by POST in the following URL structure:"]},{"l":"Example","p":["Or, if your job requires parameters, provide them through the query string:"]},{"l":"Response"}],[{"l":"Running Jobs Using the CLI","p":["There are three ways to run a job from the command line:","Run the job locally, without going through any of the background job processing chain:","Run the job locally, but wait for a worker to process it.","Send a job through the API (either localhost or remote)."]}],[{"l":"Building Jobs","p":["In order to build a jobs workspace, start in an empty folder and create a ./jobs sub folder inside it. All your job classes go in this folder. The name of this folder is configurable.","All the Ruby files in the ./jobs folder will be loaded by all of Jobly's commands. It is recommended to only keep Job classes in this folder. If you need to load additional code, you can use the ./app folder.","Your job classes should simply inherit from Jobly::Job, like this:"]}],[{"l":"Scaffolding","p":["Jobly comes with a simple scaffolding command to get you started quickly with a proper directory structure for a jobs workspace.","In order to create a jobs workspace inside the myjobs directory, run:","For additional options, run:"]}],[{"l":"The Job Class","p":["A job class is a simple Ruby class inheriting from Jobly::Job.","The only requirement is that your class implements an execute method that optionally accepts keyword arguments (recommended), or a hash.","Note that these classes are simply Jobly-flavored sidekiq jobs, with these key differences:","You need to implement execute instead of perform.","Job arguments are defined as keyword arguments, instead of positional arguments."]}],[{"l":"Job Options","p":["The Jobly::Job class supports these class-level options:","Key","Default","Purpose","queue","set the name of the queue for this job.","retries","5","number of times to retry on failure.","backtrace","number of backtrace lines to show in case of failures. Can be true, false or a number of lines to save.","solo","false","Specify that this task should only be executed once. If the same job is executed while this job is running, it will be skipped. See Solo Jobs for more information."]}],[{"l":"Job Callbacks","p":["The Jobly::Job class supports these callback methods:","Method","Description","before","Executes before the job starts","on_skip","Executes if skip_job was called from the before block","on_success","Executes after the job finishes, and only if it succeeds","on_failure","Executes after the job finishes, and only if it fails","after","Executes after the job finishes, regardless of success or failure","Each callback method can either be a block or a symbol that points to a local method. When using a block, you will have the params variable available, with all the parameters sent to the job.","In order to conditionally skip a job from its before block, you can call skip_job. This will avoid running the job, and will execute the on_skip action and the after action, if present."]}],[{"l":"Solo Jobs","p":["Jobs can be defined so that they only have one instance running at any given time, by using the solo method.","Solo Jobs (also known as Unique Jobs) will register a lock key in redis before execution, which will prevent subsequent jobs with the same fingerprint from running until the lock is released. The lock will be automatically removed when the job completes (even if it fails), or after a one hour expiration period.","When a job is skipped due to locking, it will execute the on_skip callback."]},{"l":"Job Fingerprint","p":["By default, the job's fingerprint is built of its class name and its parameters. You can specify a different fingerprint in one of two ways:","The #solo_key method can use any of the job's parameters by accessing the params hash."]},{"i":"option-1-use-the-key-property","l":"Option 1: Use the `key` property"},{"i":"option-2-define-a-solo-key-method-in-your-job","l":"Option 2: Define a `solo_key` method in your job"},{"l":"Lock Expiration Safeguard","p":["By default, the locks are set to expire after one hour. This is designed as a safeguard to avoid dead locks. Under most circumstances, you do not need to worry about it, since locks are automatically released on job completion, but in case you wish to change the default expiration period, you can use the expire option:","You can use seconds, minutes, hours and days.","Expiration timer starts to count down from the moment the job is queued, and not from the moment it is executed.","See the Solo Job Example for more details:","Solo Jobs"]}],[{"l":"Isolated Jobs","p":["Jobs can be defined so that they are executed in their own temporary directory by using the isolated method."]}],[{"l":"Storing Arbitrary Data with Redis","p":["Jobly comes bundled with Sidekiq::Status which has a built in ability allowing you to store and use arbitrary data in its Redis database.","Note that:","Values are always stored as a String, so you will need to convert them to other types when appropriate.","When retrieve does not find the key, nil is returned.","Stored keys are available across jobs."]}],[{"l":"Running Shell Commands","p":["Although you can use any Ruby method to execute shell and system commands from within your jobs, Jobly comes bundled with TTY::Command which is made available to your jobs by using the #shell method.","Using this method is recommended, since it automatically sends the STDOUT and STDERR of the command to the configured logging device, and it will raise an exception on failure, which will fail the job."]},{"l":"Dry run","p":["When the JOBLY_SHELL_DRY_RUN environment variable is set, the shell.run helper will not run the commands, and instead, only print them to the log."]},{"l":"Accessing the shell helper from other classes","p":["To include the shell helper in other classes (non Jobly::Job), you can include the Jobly::Shell module (or the more inclusive Jobly::Helpers module)."]}],[{"l":"Loading Additional Code","p":["In case your jobs require additional functionality, you may create the ./app folder as a sibling to the ./jobs folder (configurable).","All ruby files in this folder (and sub folders) will be automatically loaded and available to your jobs. Note that files will be required in alphabetical order.","In case there is an app/boot.rb file, it will be loaded first."]},{"l":"Accessing job helpers from custom code","p":["Custom code that does not inherit from Jobly::Job will not be able to access some job features, such as logging and slack notifications.","To enable such access, you can include Jobly::Helpers in your custom code:","The Jobly::Helpers module is a shortcut that includes several helpers. You can include them separately if you prefer:"]}],[{"l":"Logging"},{"l":"Logging from within jobs","p":["All your jobs have access to a standard Ruby logger."]},{"l":"Logging from other classes","p":["In case you need access to the logger from other classes (that do not inherit from Jobly::Job), you can include the Jobly::Logging module (or the more inclusive Jobly::Helpers module)."]},{"l":"Configuring the logger","p":["By default, output is sent to STDOUT but you can provide your own logger and log to a file or to syslog by using the config.log or the config.logger option in ./config/jobly.rb","The config.log option controls how logging is handled.","If left empty ( nil), the web server and workers will NOT log anywhere, and your jobs will log to STDOUT whenever you use logger.","Setting it to config.log = 'stdout' will also instruct the web server and worker to send their logging to STDOUT.","Setting it to a filename, will log to a file.","Setting it to a syslog connection string will log to a remote syslog server."]},{"l":"Logging to syslog","p":["Set config.log to a syslog connection string in the following format:","Omitting any of the options will fall back to a sensible default.","See the Syslog Example for mode details:","Logging and Reporting"]},{"l":"Separate log files for each job class","p":["If Jobly.log contains %s in the file path, it will be replaced with the slug of the job, and will create separate log files for each job class."]},{"l":"Automatic syslog tagging","p":["The same %s replacement principle applies when using a syslog connection string. This is intended to allow tagging of syslog messages with the job name."]},{"l":"Bring your own logger","p":["The config.log option can also accept any Logger instance, in case you wish to provide a custom logger."]}],[{"l":"Reporting Job Progress","p":["Jobly comes bundled with Sidekiq::Status which provides you with a live status dashboard, and a way to report progress in your jobs.","In order to report progress from your job, use the total and at methods. In addition, you can store arbitrary data related to your job with store and retrieve."]}],[{"l":"Sending Slack Notifications","p":["Jobly comes bundled with Slack::Notifier which is made available to your jobs using the #slack method."]},{"l":"Sending notifications from other classes","p":["To include the slack helper in other classes (non Jobly::Job), you can include the Jobly::Slack module (or the more inclusive Jobly::Helpers module).","See the Slack Notifications Example for more details:","Sending Slack Notifications"]}],[{"l":"Jobly Configuration","p":["Configuring Jobly can be done by one of two methods:","Setting environment variables.","Adding a config/jobly.rb to your jobs workspace."]},{"l":"Environment variable reference","p":["#general","30","app","config","Default","development","Environment Variable","http://localhost:3000/do","info","Jobly","JOBLY_API_URL","JOBLY_APP_PATH","JOBLY_AUTH","JOBLY_CONFIG_PATH","JOBLY_ENVIRONMENT","JOBLY_JOBS_NAMESPACE","JOBLY_LOG","JOBLY_LOG_LEVEL","JOBLY_REDIS_URL","JOBLY_SHELL_DRY_RUN","JOBLY_SLACK_CHANNEL","JOBLY_SLACK_USER","JOBLY_SLACK_WEBHOOK","JOBLY_STATUS_EXPIRATION","redis://localhost:6379/0","unset"]},{"l":"Jobly configuration file","p":["The below configuration file shows all the available options. Everything is optional and has defaults. This file is loaded on boot by the server, worker and jobly CLI."]},{"l":"Accessing options from your code","p":["In case you need to access any of these settings from your code, simply use the Jobly.option_name syntax or Jobly.settings to get a hash of all settings."]},{"l":"Additional read only options","p":["These options can also be accessed from anywhere in your code, as read only:"]}],[{"l":"Worker Configuration","p":["The worker options can be configured by command line options or by specifying a worker configuration file when running it.","The configuration file can be used to:","Specify default values for the worker (instead of specifying them inside the jobs themselves).","Specify additional advanced sidekiq configuration options.","The worker configuration file is in fact a sidekiq configuration file. Refer to the sidekiq documentation if you need more advanced options."]},{"l":"Sample worker configuration file","p":["Place your YAML config file inside the config folder, and use the jobly worker --config my-worker to use it.","The filename specified with the --config flag must be placed inside the config folder. You do not need to specify the folder name or the .yml extension.","See the Worker Configuration Example for more details:","Worker Configuration"]}],[{"l":"Custom Settings","p":["Jobly comes bundled with Sting, which provides you with a settings helper that lets you use custom YAML files for configuring your jobs."]},{"l":"Settings files","p":["Place settings.yml in the config folder.","Optionally, place additional settings.environment.yml(for example settings.production.yml) files for each of your environments. These files will be loaded based on the JOBLY_ENVIRONMENT configuration."]},{"l":"ERB","p":["Before the YAML files are loaded, they are evaluated with ERB, so you can use Ruby code in them (for example, to load environment variables):"]},{"l":"Extended YAML","p":["Your settings*.yml files can use the extends key to load and merge additional YAML files:","The .yml extension is optional.","You may extend either a single file or an array of files.","This functionality is provided by ExtendedYAML."]},{"l":"Using settings in your jobs","p":["Your jobs will have access to a settings object:"]},{"l":"Using settings in other classes","p":["To have the settings object available to other (non Jobly::Job) classes, include the Jobly::Settings module (or the more inclusive Jobly::Helpers module).","See the Settings Example for mode details:","Custom Settings"]}],[{"l":"Workspace Info","p":["You can place a file named info.md in your config folder with markdown-formatted information about your jobs workspace.","This file will be pretty-printed when running jobly info.","You can use this file as a template:"]}],[{"l":"Examples","p":["The examples in this section are also available on GitHub:","Each example demonstrates a specific feature or aspect of Jobly."]}],[{"l":"Basic Example"},{"l":"Code"},{"i":"jobs-hello-rb","l":"jobs/hello.rb"},{"l":"Commands to Try"}],[{"l":"Basic Auth Example"},{"l":"Code"},{"i":"jobs-hello-rb","l":"jobs/hello.rb"},{"l":"Commands to Try"}],[{"l":"Custom Rack Mount Example","p":["This example demonstrates how to amend the web server so that it also serves any custom rack app."]},{"l":"Code"},{"i":"config-jobly-rb","l":"config/jobly.rb"},{"i":"app-my-server-rb","l":"app/my_server.rb"},{"l":"Commands to Try"}],[{"l":"Data Store Example","p":["This example demonstrates how to store and retrieve arbitrary data on redis."]},{"l":"Code"},{"i":"jobs-build-rb","l":"jobs/build.rb"},{"l":"Commands to Try"}],[{"l":"Docker Compose Example","p":["This example demonstrates how to use Jobly inside a docker container and with docker compose."]},{"l":"Code"},{"l":"Dockerfile"},{"l":"docker-compose.yml"},{"i":"app-jobs-hello-rb","l":"app/jobs/hello.rb"},{"l":"Commands to Try"}],[{"l":"GitHub Integration Example","p":["This example demonstrates how to integrate Jobly with GitHub for:","Handling incoming webhooks from GitHub","Sending pull request status updates","These features are not built into Jobly, but can be easily implemented by adding the Loadrunner gem."]},{"l":"Code"},{"i":"jobs-build-rb","l":"jobs/build.rb"},{"i":"hooks-global","l":"hooks/global"},{"i":"config-jobly-rb","l":"config/jobly.rb"},{"l":"Commands to Try"}],[{"l":"Job Callbacks Example","p":["This example illustrates the use of before, after, on_skip, on_success, and on_failure blocks."]},{"l":"Code"},{"i":"jobs-actions-rb","l":"jobs/actions.rb"},{"i":"jobs-filter-rb","l":"jobs/filter.rb"},{"l":"Commands to Try"}],[{"l":"Job in Job Example","p":["This example demonstrates how to call a job from inside another job.","Two approaches are possible:","Executing secondary jobs synchronously, as part of the parent job.","Spawning the secondary jobs to be executed later by the worker, as separate jobs."]},{"l":"Code"},{"i":"jobs-run-sync-rb","l":"jobs/run_sync.rb"},{"i":"jobs-run-async-rb","l":"jobs/run_async.rb"},{"i":"jobs-sub-job-rb","l":"jobs/sub_job.rb"},{"l":"Commands to Try"}],[{"l":"Namespaces Example","p":["This example illustrates how to define jobs that are namespaced in modules.","It illustrates:","How all jobs can be nested inside a specific module that is used as the default namespace for all jobs - see the config folder.","How additional namespacing is done by putting some jobs under a nested module and (optionally, by convention) putting them inside a subfolder - see the jobs folder."]},{"l":"Code"},{"i":"config-jobly-rb","l":"config/jobly.rb"},{"i":"jobs-hello-rb","l":"jobs/hello.rb"},{"i":"jobs-inner-hi-rb","l":"jobs/inner/hi.rb"},{"l":"Commands to Try"}],[{"l":"Options and Errors Example","p":["This example illustrates setting the job options: backtrace, queue and retries."]},{"l":"Code"},{"i":"jobs-deploy-rb","l":"jobs/deploy.rb"},{"l":"Commands to Try"}],[{"l":"Settings Example","p":["This example illustrates how to use the settings helper to load custom settings into your jobs."]},{"l":"Code"},{"i":"jobs-show-settings-rb","l":"jobs/show_settings.rb"},{"i":"config-settings-yml","l":"config/settings.yml"},{"i":"config-settings-development-yml","l":"config/settings.development.yml"},{"l":"Commands to Try"}],[{"l":"Slack Notifications Example","p":["This example illustrates how to send slack notifications from your jobs. Note that for this to work, you need to set up a web hook in your Slack configuration and then make it available to Jobly by the slack_webhook option or the JOBLY_SLACK_WEBHOOK environment variable."]},{"l":"Code"},{"i":"jobs-greet-rb","l":"jobs/greet.rb"},{"l":"Commands to Try"}],[{"l":"Solo Job Example","p":["This example demonstrates how to ensure only one instance of the job is executed at any given time."]},{"l":"Code"},{"i":"jobs-solo-rb","l":"jobs/solo.rb"},{"l":"Commands to Try","p":["Before running these commands, it is recommended you open the Statuses tab in the web dashboard."]}],[{"l":"Syslog Example","p":["This example illustrates how to configure Jobly to send all logger events to a local or remote syslog."]},{"i":"enabling-syslog-udp-connection","l":":icon-question: Enabling syslog UDP connection","p":["Note that for this example to work, your syslog server must be configured to accept UDP connections.","Edit /etc/rsyslog.conf and uncomment these lines:"]},{"l":"Code"},{"i":"config-jobly-rb","l":"config/jobly.rb"},{"i":"jobs-hello-rb","l":"jobs/hello.rb"},{"l":"Commands to Try"}],[{"l":"Worker Configuration Example","p":["This example makes use of worker configuration file in order to tell the worker to process two queues ( critical and mundane) instead of the default queue.","Note that the same can also be achieved through the command line, without using a config file."]},{"l":"Code"},{"i":"config-worker-yml","l":"config/worker.yml"},{"i":"jobs-critical-rb","l":"jobs/critical.rb"},{"i":"jobs-mundane-rb","l":"jobs/mundane.rb"},{"l":"Procfile"},{"l":"Commands to Try"}]]